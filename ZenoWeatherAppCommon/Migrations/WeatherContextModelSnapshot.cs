// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ZenoWeatherAppCommon.Data;

#nullable disable

namespace ZenoWeatherAppCommon.Migrations
{
    [DbContext(typeof(WeatherContext))]
    partial class WeatherContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.10");

            modelBuilder.Entity("ZenoWeatherApp.Model.AdministrativeArea", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("TEXT");

                    b.Property<string>("EnglishName")
                        .HasColumnType("TEXT");

                    b.Property<string>("EnglishType")
                        .HasColumnType("TEXT");

                    b.Property<string>("LocalizedName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LocalizedType")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("AdministrativeAreas");
                });

            modelBuilder.Entity("ZenoWeatherApp.Model.Country", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("TEXT");

                    b.Property<string>("EnglishName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LocalizedName")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("ZenoWeatherApp.Model.CurrentConditions", b =>
                {
                    b.Property<int>("CurrentConditionsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CloudCover")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasPrecipitation")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDayTime")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LocalObservationDateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("PrecipitationType")
                        .HasColumnType("TEXT");

                    b.Property<int>("RelativeHumidity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UVIndex")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UVIndexText")
                        .HasColumnType("TEXT");

                    b.Property<int>("WeatherIcon")
                        .HasColumnType("INTEGER");

                    b.Property<string>("WeatherText")
                        .HasColumnType("TEXT");

                    b.HasKey("CurrentConditionsId");

                    b.ToTable("CurrentConditions");
                });

            modelBuilder.Entity("ZenoWeatherApp.Model.DailyForecast", b =>
                {
                    b.Property<int>("DailyForecastId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ForecastId")
                        .HasColumnType("INTEGER");

                    b.HasKey("DailyForecastId");

                    b.HasIndex("ForecastId");

                    b.ToTable("DailyForecast");
                });

            modelBuilder.Entity("ZenoWeatherApp.Model.Forecast", b =>
                {
                    b.Property<int>("ForecastId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.HasKey("ForecastId");

                    b.ToTable("Forecasts");
                });

            modelBuilder.Entity("ZenoWeatherApp.Model.Location", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("TEXT");

                    b.Property<string>("AdministrativeAreaID")
                        .HasColumnType("TEXT");

                    b.Property<string>("CountryID")
                        .HasColumnType("TEXT");

                    b.Property<string>("EnglishName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LocalizedName")
                        .HasColumnType("TEXT");

                    b.Property<string>("PrimaryPostalCode")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Rank")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TimeZoneCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.Property<int>("Version")
                        .HasColumnType("INTEGER");

                    b.HasKey("Key");

                    b.HasIndex("AdministrativeAreaID");

                    b.HasIndex("CountryID");

                    b.HasIndex("TimeZoneCode");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("ZenoWeatherApp.Model.TimeZone", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("TEXT");

                    b.Property<float>("GmtOffset")
                        .HasColumnType("REAL");

                    b.Property<bool>("IsDaylightSaving")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Code");

                    b.ToTable("TimeZones");
                });

            modelBuilder.Entity("ZenoWeatherApp.Model.CurrentConditions", b =>
                {
                    b.OwnsOne("ZenoWeatherApp.Model.DataReadingPair", "ApparentTemperature", b1 =>
                        {
                            b1.Property<int>("CurrentConditionsId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("DataReadingPairId")
                                .HasColumnType("INTEGER");

                            b1.HasKey("CurrentConditionsId");

                            b1.ToTable("CurrentConditions");

                            b1.WithOwner()
                                .HasForeignKey("CurrentConditionsId");

                            b1.OwnsOne("ZenoWeatherApp.Model.DataReading", "Imperial", b2 =>
                                {
                                    b2.Property<int>("DataReadingPairCurrentConditionsId")
                                        .HasColumnType("INTEGER");

                                    b2.Property<string>("Unit")
                                        .HasColumnType("TEXT");

                                    b2.Property<int>("UnitType")
                                        .HasColumnType("INTEGER");

                                    b2.Property<double>("Value")
                                        .HasColumnType("REAL");

                                    b2.HasKey("DataReadingPairCurrentConditionsId");

                                    b2.ToTable("CurrentConditions");

                                    b2.WithOwner()
                                        .HasForeignKey("DataReadingPairCurrentConditionsId");
                                });

                            b1.OwnsOne("ZenoWeatherApp.Model.DataReading", "Metric", b2 =>
                                {
                                    b2.Property<int>("DataReadingPairCurrentConditionsId")
                                        .HasColumnType("INTEGER");

                                    b2.Property<string>("Unit")
                                        .HasColumnType("TEXT");

                                    b2.Property<int>("UnitType")
                                        .HasColumnType("INTEGER");

                                    b2.Property<double>("Value")
                                        .HasColumnType("REAL");

                                    b2.HasKey("DataReadingPairCurrentConditionsId");

                                    b2.ToTable("CurrentConditions");

                                    b2.WithOwner()
                                        .HasForeignKey("DataReadingPairCurrentConditionsId");
                                });

                            b1.Navigation("Imperial");

                            b1.Navigation("Metric");
                        });

                    b.OwnsOne("ZenoWeatherApp.Model.DataReadingPair", "Ceiling", b1 =>
                        {
                            b1.Property<int>("CurrentConditionsId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("DataReadingPairId")
                                .HasColumnType("INTEGER");

                            b1.HasKey("CurrentConditionsId");

                            b1.ToTable("CurrentConditions");

                            b1.WithOwner()
                                .HasForeignKey("CurrentConditionsId");

                            b1.OwnsOne("ZenoWeatherApp.Model.DataReading", "Imperial", b2 =>
                                {
                                    b2.Property<int>("DataReadingPairCurrentConditionsId")
                                        .HasColumnType("INTEGER");

                                    b2.Property<string>("Unit")
                                        .HasColumnType("TEXT");

                                    b2.Property<int>("UnitType")
                                        .HasColumnType("INTEGER");

                                    b2.Property<double>("Value")
                                        .HasColumnType("REAL");

                                    b2.HasKey("DataReadingPairCurrentConditionsId");

                                    b2.ToTable("CurrentConditions");

                                    b2.WithOwner()
                                        .HasForeignKey("DataReadingPairCurrentConditionsId");
                                });

                            b1.OwnsOne("ZenoWeatherApp.Model.DataReading", "Metric", b2 =>
                                {
                                    b2.Property<int>("DataReadingPairCurrentConditionsId")
                                        .HasColumnType("INTEGER");

                                    b2.Property<string>("Unit")
                                        .HasColumnType("TEXT");

                                    b2.Property<int>("UnitType")
                                        .HasColumnType("INTEGER");

                                    b2.Property<double>("Value")
                                        .HasColumnType("REAL");

                                    b2.HasKey("DataReadingPairCurrentConditionsId");

                                    b2.ToTable("CurrentConditions");

                                    b2.WithOwner()
                                        .HasForeignKey("DataReadingPairCurrentConditionsId");
                                });

                            b1.Navigation("Imperial");

                            b1.Navigation("Metric");
                        });

                    b.OwnsOne("ZenoWeatherApp.Model.DataReadingPair", "DewPoint", b1 =>
                        {
                            b1.Property<int>("CurrentConditionsId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("DataReadingPairId")
                                .HasColumnType("INTEGER");

                            b1.HasKey("CurrentConditionsId");

                            b1.ToTable("CurrentConditions");

                            b1.WithOwner()
                                .HasForeignKey("CurrentConditionsId");

                            b1.OwnsOne("ZenoWeatherApp.Model.DataReading", "Imperial", b2 =>
                                {
                                    b2.Property<int>("DataReadingPairCurrentConditionsId")
                                        .HasColumnType("INTEGER");

                                    b2.Property<string>("Unit")
                                        .HasColumnType("TEXT");

                                    b2.Property<int>("UnitType")
                                        .HasColumnType("INTEGER");

                                    b2.Property<double>("Value")
                                        .HasColumnType("REAL");

                                    b2.HasKey("DataReadingPairCurrentConditionsId");

                                    b2.ToTable("CurrentConditions");

                                    b2.WithOwner()
                                        .HasForeignKey("DataReadingPairCurrentConditionsId");
                                });

                            b1.OwnsOne("ZenoWeatherApp.Model.DataReading", "Metric", b2 =>
                                {
                                    b2.Property<int>("DataReadingPairCurrentConditionsId")
                                        .HasColumnType("INTEGER");

                                    b2.Property<string>("Unit")
                                        .HasColumnType("TEXT");

                                    b2.Property<int>("UnitType")
                                        .HasColumnType("INTEGER");

                                    b2.Property<double>("Value")
                                        .HasColumnType("REAL");

                                    b2.HasKey("DataReadingPairCurrentConditionsId");

                                    b2.ToTable("CurrentConditions");

                                    b2.WithOwner()
                                        .HasForeignKey("DataReadingPairCurrentConditionsId");
                                });

                            b1.Navigation("Imperial");

                            b1.Navigation("Metric");
                        });

                    b.OwnsOne("ZenoWeatherApp.Model.DataReadingPair", "Pressure", b1 =>
                        {
                            b1.Property<int>("CurrentConditionsId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("DataReadingPairId")
                                .HasColumnType("INTEGER");

                            b1.HasKey("CurrentConditionsId");

                            b1.ToTable("CurrentConditions");

                            b1.WithOwner()
                                .HasForeignKey("CurrentConditionsId");

                            b1.OwnsOne("ZenoWeatherApp.Model.DataReading", "Imperial", b2 =>
                                {
                                    b2.Property<int>("DataReadingPairCurrentConditionsId")
                                        .HasColumnType("INTEGER");

                                    b2.Property<string>("Unit")
                                        .HasColumnType("TEXT");

                                    b2.Property<int>("UnitType")
                                        .HasColumnType("INTEGER");

                                    b2.Property<double>("Value")
                                        .HasColumnType("REAL");

                                    b2.HasKey("DataReadingPairCurrentConditionsId");

                                    b2.ToTable("CurrentConditions");

                                    b2.WithOwner()
                                        .HasForeignKey("DataReadingPairCurrentConditionsId");
                                });

                            b1.OwnsOne("ZenoWeatherApp.Model.DataReading", "Metric", b2 =>
                                {
                                    b2.Property<int>("DataReadingPairCurrentConditionsId")
                                        .HasColumnType("INTEGER");

                                    b2.Property<string>("Unit")
                                        .HasColumnType("TEXT");

                                    b2.Property<int>("UnitType")
                                        .HasColumnType("INTEGER");

                                    b2.Property<double>("Value")
                                        .HasColumnType("REAL");

                                    b2.HasKey("DataReadingPairCurrentConditionsId");

                                    b2.ToTable("CurrentConditions");

                                    b2.WithOwner()
                                        .HasForeignKey("DataReadingPairCurrentConditionsId");
                                });

                            b1.Navigation("Imperial");

                            b1.Navigation("Metric");
                        });

                    b.OwnsOne("ZenoWeatherApp.Model.DataReadingPair", "Temperature", b1 =>
                        {
                            b1.Property<int>("CurrentConditionsId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("DataReadingPairId")
                                .HasColumnType("INTEGER");

                            b1.HasKey("CurrentConditionsId");

                            b1.ToTable("CurrentConditions");

                            b1.WithOwner()
                                .HasForeignKey("CurrentConditionsId");

                            b1.OwnsOne("ZenoWeatherApp.Model.DataReading", "Imperial", b2 =>
                                {
                                    b2.Property<int>("DataReadingPairCurrentConditionsId")
                                        .HasColumnType("INTEGER");

                                    b2.Property<string>("Unit")
                                        .HasColumnType("TEXT");

                                    b2.Property<int>("UnitType")
                                        .HasColumnType("INTEGER");

                                    b2.Property<double>("Value")
                                        .HasColumnType("REAL");

                                    b2.HasKey("DataReadingPairCurrentConditionsId");

                                    b2.ToTable("CurrentConditions");

                                    b2.WithOwner()
                                        .HasForeignKey("DataReadingPairCurrentConditionsId");
                                });

                            b1.OwnsOne("ZenoWeatherApp.Model.DataReading", "Metric", b2 =>
                                {
                                    b2.Property<int>("DataReadingPairCurrentConditionsId")
                                        .HasColumnType("INTEGER");

                                    b2.Property<string>("Unit")
                                        .HasColumnType("TEXT");

                                    b2.Property<int>("UnitType")
                                        .HasColumnType("INTEGER");

                                    b2.Property<double>("Value")
                                        .HasColumnType("REAL");

                                    b2.HasKey("DataReadingPairCurrentConditionsId");

                                    b2.ToTable("CurrentConditions");

                                    b2.WithOwner()
                                        .HasForeignKey("DataReadingPairCurrentConditionsId");
                                });

                            b1.Navigation("Imperial");

                            b1.Navigation("Metric");
                        });

                    b.OwnsOne("ZenoWeatherApp.Model.DataReadingPair", "Visibility", b1 =>
                        {
                            b1.Property<int>("CurrentConditionsId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("DataReadingPairId")
                                .HasColumnType("INTEGER");

                            b1.HasKey("CurrentConditionsId");

                            b1.ToTable("CurrentConditions");

                            b1.WithOwner()
                                .HasForeignKey("CurrentConditionsId");

                            b1.OwnsOne("ZenoWeatherApp.Model.DataReading", "Imperial", b2 =>
                                {
                                    b2.Property<int>("DataReadingPairCurrentConditionsId")
                                        .HasColumnType("INTEGER");

                                    b2.Property<string>("Unit")
                                        .HasColumnType("TEXT");

                                    b2.Property<int>("UnitType")
                                        .HasColumnType("INTEGER");

                                    b2.Property<double>("Value")
                                        .HasColumnType("REAL");

                                    b2.HasKey("DataReadingPairCurrentConditionsId");

                                    b2.ToTable("CurrentConditions");

                                    b2.WithOwner()
                                        .HasForeignKey("DataReadingPairCurrentConditionsId");
                                });

                            b1.OwnsOne("ZenoWeatherApp.Model.DataReading", "Metric", b2 =>
                                {
                                    b2.Property<int>("DataReadingPairCurrentConditionsId")
                                        .HasColumnType("INTEGER");

                                    b2.Property<string>("Unit")
                                        .HasColumnType("TEXT");

                                    b2.Property<int>("UnitType")
                                        .HasColumnType("INTEGER");

                                    b2.Property<double>("Value")
                                        .HasColumnType("REAL");

                                    b2.HasKey("DataReadingPairCurrentConditionsId");

                                    b2.ToTable("CurrentConditions");

                                    b2.WithOwner()
                                        .HasForeignKey("DataReadingPairCurrentConditionsId");
                                });

                            b1.Navigation("Imperial");

                            b1.Navigation("Metric");
                        });

                    b.OwnsOne("ZenoWeatherApp.Model.DataReadingPair", "WetBulbTemperature", b1 =>
                        {
                            b1.Property<int>("CurrentConditionsId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("DataReadingPairId")
                                .HasColumnType("INTEGER");

                            b1.HasKey("CurrentConditionsId");

                            b1.ToTable("CurrentConditions");

                            b1.WithOwner()
                                .HasForeignKey("CurrentConditionsId");

                            b1.OwnsOne("ZenoWeatherApp.Model.DataReading", "Imperial", b2 =>
                                {
                                    b2.Property<int>("DataReadingPairCurrentConditionsId")
                                        .HasColumnType("INTEGER");

                                    b2.Property<string>("Unit")
                                        .HasColumnType("TEXT");

                                    b2.Property<int>("UnitType")
                                        .HasColumnType("INTEGER");

                                    b2.Property<double>("Value")
                                        .HasColumnType("REAL");

                                    b2.HasKey("DataReadingPairCurrentConditionsId");

                                    b2.ToTable("CurrentConditions");

                                    b2.WithOwner()
                                        .HasForeignKey("DataReadingPairCurrentConditionsId");
                                });

                            b1.OwnsOne("ZenoWeatherApp.Model.DataReading", "Metric", b2 =>
                                {
                                    b2.Property<int>("DataReadingPairCurrentConditionsId")
                                        .HasColumnType("INTEGER");

                                    b2.Property<string>("Unit")
                                        .HasColumnType("TEXT");

                                    b2.Property<int>("UnitType")
                                        .HasColumnType("INTEGER");

                                    b2.Property<double>("Value")
                                        .HasColumnType("REAL");

                                    b2.HasKey("DataReadingPairCurrentConditionsId");

                                    b2.ToTable("CurrentConditions");

                                    b2.WithOwner()
                                        .HasForeignKey("DataReadingPairCurrentConditionsId");
                                });

                            b1.Navigation("Imperial");

                            b1.Navigation("Metric");
                        });

                    b.OwnsOne("ZenoWeatherApp.Model.DataReadingPair", "WindChillTemperature", b1 =>
                        {
                            b1.Property<int>("CurrentConditionsId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("DataReadingPairId")
                                .HasColumnType("INTEGER");

                            b1.HasKey("CurrentConditionsId");

                            b1.ToTable("CurrentConditions");

                            b1.WithOwner()
                                .HasForeignKey("CurrentConditionsId");

                            b1.OwnsOne("ZenoWeatherApp.Model.DataReading", "Imperial", b2 =>
                                {
                                    b2.Property<int>("DataReadingPairCurrentConditionsId")
                                        .HasColumnType("INTEGER");

                                    b2.Property<string>("Unit")
                                        .HasColumnType("TEXT");

                                    b2.Property<int>("UnitType")
                                        .HasColumnType("INTEGER");

                                    b2.Property<double>("Value")
                                        .HasColumnType("REAL");

                                    b2.HasKey("DataReadingPairCurrentConditionsId");

                                    b2.ToTable("CurrentConditions");

                                    b2.WithOwner()
                                        .HasForeignKey("DataReadingPairCurrentConditionsId");
                                });

                            b1.OwnsOne("ZenoWeatherApp.Model.DataReading", "Metric", b2 =>
                                {
                                    b2.Property<int>("DataReadingPairCurrentConditionsId")
                                        .HasColumnType("INTEGER");

                                    b2.Property<string>("Unit")
                                        .HasColumnType("TEXT");

                                    b2.Property<int>("UnitType")
                                        .HasColumnType("INTEGER");

                                    b2.Property<double>("Value")
                                        .HasColumnType("REAL");

                                    b2.HasKey("DataReadingPairCurrentConditionsId");

                                    b2.ToTable("CurrentConditions");

                                    b2.WithOwner()
                                        .HasForeignKey("DataReadingPairCurrentConditionsId");
                                });

                            b1.Navigation("Imperial");

                            b1.Navigation("Metric");
                        });

                    b.OwnsOne("ZenoWeatherApp.Model.PrecipitationSummary", "PrecipitationSummary", b1 =>
                        {
                            b1.Property<int>("CurrentConditionsId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("PrecipitationSummaryId")
                                .HasColumnType("INTEGER");

                            b1.HasKey("CurrentConditionsId");

                            b1.ToTable("CurrentConditions");

                            b1.WithOwner()
                                .HasForeignKey("CurrentConditionsId");

                            b1.OwnsOne("ZenoWeatherApp.Model.DataReadingPair", "Past12Hours", b2 =>
                                {
                                    b2.Property<int>("PrecipitationSummaryCurrentConditionsId")
                                        .HasColumnType("INTEGER");

                                    b2.Property<int>("DataReadingPairId")
                                        .HasColumnType("INTEGER");

                                    b2.HasKey("PrecipitationSummaryCurrentConditionsId");

                                    b2.ToTable("CurrentConditions");

                                    b2.WithOwner()
                                        .HasForeignKey("PrecipitationSummaryCurrentConditionsId");

                                    b2.OwnsOne("ZenoWeatherApp.Model.DataReading", "Imperial", b3 =>
                                        {
                                            b3.Property<int>("DataReadingPairPrecipitationSummaryCurrentConditionsId")
                                                .HasColumnType("INTEGER");

                                            b3.Property<string>("Unit")
                                                .HasColumnType("TEXT");

                                            b3.Property<int>("UnitType")
                                                .HasColumnType("INTEGER");

                                            b3.Property<double>("Value")
                                                .HasColumnType("REAL");

                                            b3.HasKey("DataReadingPairPrecipitationSummaryCurrentConditionsId");

                                            b3.ToTable("CurrentConditions");

                                            b3.WithOwner()
                                                .HasForeignKey("DataReadingPairPrecipitationSummaryCurrentConditionsId");
                                        });

                                    b2.OwnsOne("ZenoWeatherApp.Model.DataReading", "Metric", b3 =>
                                        {
                                            b3.Property<int>("DataReadingPairPrecipitationSummaryCurrentConditionsId")
                                                .HasColumnType("INTEGER");

                                            b3.Property<string>("Unit")
                                                .HasColumnType("TEXT");

                                            b3.Property<int>("UnitType")
                                                .HasColumnType("INTEGER");

                                            b3.Property<double>("Value")
                                                .HasColumnType("REAL");

                                            b3.HasKey("DataReadingPairPrecipitationSummaryCurrentConditionsId");

                                            b3.ToTable("CurrentConditions");

                                            b3.WithOwner()
                                                .HasForeignKey("DataReadingPairPrecipitationSummaryCurrentConditionsId");
                                        });

                                    b2.Navigation("Imperial");

                                    b2.Navigation("Metric");
                                });

                            b1.OwnsOne("ZenoWeatherApp.Model.DataReadingPair", "Past18Hours", b2 =>
                                {
                                    b2.Property<int>("PrecipitationSummaryCurrentConditionsId")
                                        .HasColumnType("INTEGER");

                                    b2.Property<int>("DataReadingPairId")
                                        .HasColumnType("INTEGER");

                                    b2.HasKey("PrecipitationSummaryCurrentConditionsId");

                                    b2.ToTable("CurrentConditions");

                                    b2.WithOwner()
                                        .HasForeignKey("PrecipitationSummaryCurrentConditionsId");

                                    b2.OwnsOne("ZenoWeatherApp.Model.DataReading", "Imperial", b3 =>
                                        {
                                            b3.Property<int>("DataReadingPairPrecipitationSummaryCurrentConditionsId")
                                                .HasColumnType("INTEGER");

                                            b3.Property<string>("Unit")
                                                .HasColumnType("TEXT");

                                            b3.Property<int>("UnitType")
                                                .HasColumnType("INTEGER");

                                            b3.Property<double>("Value")
                                                .HasColumnType("REAL");

                                            b3.HasKey("DataReadingPairPrecipitationSummaryCurrentConditionsId");

                                            b3.ToTable("CurrentConditions");

                                            b3.WithOwner()
                                                .HasForeignKey("DataReadingPairPrecipitationSummaryCurrentConditionsId");
                                        });

                                    b2.OwnsOne("ZenoWeatherApp.Model.DataReading", "Metric", b3 =>
                                        {
                                            b3.Property<int>("DataReadingPairPrecipitationSummaryCurrentConditionsId")
                                                .HasColumnType("INTEGER");

                                            b3.Property<string>("Unit")
                                                .HasColumnType("TEXT");

                                            b3.Property<int>("UnitType")
                                                .HasColumnType("INTEGER");

                                            b3.Property<double>("Value")
                                                .HasColumnType("REAL");

                                            b3.HasKey("DataReadingPairPrecipitationSummaryCurrentConditionsId");

                                            b3.ToTable("CurrentConditions");

                                            b3.WithOwner()
                                                .HasForeignKey("DataReadingPairPrecipitationSummaryCurrentConditionsId");
                                        });

                                    b2.Navigation("Imperial");

                                    b2.Navigation("Metric");
                                });

                            b1.OwnsOne("ZenoWeatherApp.Model.DataReadingPair", "Past24Hours", b2 =>
                                {
                                    b2.Property<int>("PrecipitationSummaryCurrentConditionsId")
                                        .HasColumnType("INTEGER");

                                    b2.Property<int>("DataReadingPairId")
                                        .HasColumnType("INTEGER");

                                    b2.HasKey("PrecipitationSummaryCurrentConditionsId");

                                    b2.ToTable("CurrentConditions");

                                    b2.WithOwner()
                                        .HasForeignKey("PrecipitationSummaryCurrentConditionsId");

                                    b2.OwnsOne("ZenoWeatherApp.Model.DataReading", "Imperial", b3 =>
                                        {
                                            b3.Property<int>("DataReadingPairPrecipitationSummaryCurrentConditionsId")
                                                .HasColumnType("INTEGER");

                                            b3.Property<string>("Unit")
                                                .HasColumnType("TEXT");

                                            b3.Property<int>("UnitType")
                                                .HasColumnType("INTEGER");

                                            b3.Property<double>("Value")
                                                .HasColumnType("REAL");

                                            b3.HasKey("DataReadingPairPrecipitationSummaryCurrentConditionsId");

                                            b3.ToTable("CurrentConditions");

                                            b3.WithOwner()
                                                .HasForeignKey("DataReadingPairPrecipitationSummaryCurrentConditionsId");
                                        });

                                    b2.OwnsOne("ZenoWeatherApp.Model.DataReading", "Metric", b3 =>
                                        {
                                            b3.Property<int>("DataReadingPairPrecipitationSummaryCurrentConditionsId")
                                                .HasColumnType("INTEGER");

                                            b3.Property<string>("Unit")
                                                .HasColumnType("TEXT");

                                            b3.Property<int>("UnitType")
                                                .HasColumnType("INTEGER");

                                            b3.Property<double>("Value")
                                                .HasColumnType("REAL");

                                            b3.HasKey("DataReadingPairPrecipitationSummaryCurrentConditionsId");

                                            b3.ToTable("CurrentConditions");

                                            b3.WithOwner()
                                                .HasForeignKey("DataReadingPairPrecipitationSummaryCurrentConditionsId");
                                        });

                                    b2.Navigation("Imperial");

                                    b2.Navigation("Metric");
                                });

                            b1.OwnsOne("ZenoWeatherApp.Model.DataReadingPair", "Past3Hours", b2 =>
                                {
                                    b2.Property<int>("PrecipitationSummaryCurrentConditionsId")
                                        .HasColumnType("INTEGER");

                                    b2.Property<int>("DataReadingPairId")
                                        .HasColumnType("INTEGER");

                                    b2.HasKey("PrecipitationSummaryCurrentConditionsId");

                                    b2.ToTable("CurrentConditions");

                                    b2.WithOwner()
                                        .HasForeignKey("PrecipitationSummaryCurrentConditionsId");

                                    b2.OwnsOne("ZenoWeatherApp.Model.DataReading", "Imperial", b3 =>
                                        {
                                            b3.Property<int>("DataReadingPairPrecipitationSummaryCurrentConditionsId")
                                                .HasColumnType("INTEGER");

                                            b3.Property<string>("Unit")
                                                .HasColumnType("TEXT");

                                            b3.Property<int>("UnitType")
                                                .HasColumnType("INTEGER");

                                            b3.Property<double>("Value")
                                                .HasColumnType("REAL");

                                            b3.HasKey("DataReadingPairPrecipitationSummaryCurrentConditionsId");

                                            b3.ToTable("CurrentConditions");

                                            b3.WithOwner()
                                                .HasForeignKey("DataReadingPairPrecipitationSummaryCurrentConditionsId");
                                        });

                                    b2.OwnsOne("ZenoWeatherApp.Model.DataReading", "Metric", b3 =>
                                        {
                                            b3.Property<int>("DataReadingPairPrecipitationSummaryCurrentConditionsId")
                                                .HasColumnType("INTEGER");

                                            b3.Property<string>("Unit")
                                                .HasColumnType("TEXT");

                                            b3.Property<int>("UnitType")
                                                .HasColumnType("INTEGER");

                                            b3.Property<double>("Value")
                                                .HasColumnType("REAL");

                                            b3.HasKey("DataReadingPairPrecipitationSummaryCurrentConditionsId");

                                            b3.ToTable("CurrentConditions");

                                            b3.WithOwner()
                                                .HasForeignKey("DataReadingPairPrecipitationSummaryCurrentConditionsId");
                                        });

                                    b2.Navigation("Imperial");

                                    b2.Navigation("Metric");
                                });

                            b1.OwnsOne("ZenoWeatherApp.Model.DataReadingPair", "Past6Hours", b2 =>
                                {
                                    b2.Property<int>("PrecipitationSummaryCurrentConditionsId")
                                        .HasColumnType("INTEGER");

                                    b2.Property<int>("DataReadingPairId")
                                        .HasColumnType("INTEGER");

                                    b2.HasKey("PrecipitationSummaryCurrentConditionsId");

                                    b2.ToTable("CurrentConditions");

                                    b2.WithOwner()
                                        .HasForeignKey("PrecipitationSummaryCurrentConditionsId");

                                    b2.OwnsOne("ZenoWeatherApp.Model.DataReading", "Imperial", b3 =>
                                        {
                                            b3.Property<int>("DataReadingPairPrecipitationSummaryCurrentConditionsId")
                                                .HasColumnType("INTEGER");

                                            b3.Property<string>("Unit")
                                                .HasColumnType("TEXT");

                                            b3.Property<int>("UnitType")
                                                .HasColumnType("INTEGER");

                                            b3.Property<double>("Value")
                                                .HasColumnType("REAL");

                                            b3.HasKey("DataReadingPairPrecipitationSummaryCurrentConditionsId");

                                            b3.ToTable("CurrentConditions");

                                            b3.WithOwner()
                                                .HasForeignKey("DataReadingPairPrecipitationSummaryCurrentConditionsId");
                                        });

                                    b2.OwnsOne("ZenoWeatherApp.Model.DataReading", "Metric", b3 =>
                                        {
                                            b3.Property<int>("DataReadingPairPrecipitationSummaryCurrentConditionsId")
                                                .HasColumnType("INTEGER");

                                            b3.Property<string>("Unit")
                                                .HasColumnType("TEXT");

                                            b3.Property<int>("UnitType")
                                                .HasColumnType("INTEGER");

                                            b3.Property<double>("Value")
                                                .HasColumnType("REAL");

                                            b3.HasKey("DataReadingPairPrecipitationSummaryCurrentConditionsId");

                                            b3.ToTable("CurrentConditions");

                                            b3.WithOwner()
                                                .HasForeignKey("DataReadingPairPrecipitationSummaryCurrentConditionsId");
                                        });

                                    b2.Navigation("Imperial");

                                    b2.Navigation("Metric");
                                });

                            b1.OwnsOne("ZenoWeatherApp.Model.DataReadingPair", "Past9Hours", b2 =>
                                {
                                    b2.Property<int>("PrecipitationSummaryCurrentConditionsId")
                                        .HasColumnType("INTEGER");

                                    b2.Property<int>("DataReadingPairId")
                                        .HasColumnType("INTEGER");

                                    b2.HasKey("PrecipitationSummaryCurrentConditionsId");

                                    b2.ToTable("CurrentConditions");

                                    b2.WithOwner()
                                        .HasForeignKey("PrecipitationSummaryCurrentConditionsId");

                                    b2.OwnsOne("ZenoWeatherApp.Model.DataReading", "Imperial", b3 =>
                                        {
                                            b3.Property<int>("DataReadingPairPrecipitationSummaryCurrentConditionsId")
                                                .HasColumnType("INTEGER");

                                            b3.Property<string>("Unit")
                                                .HasColumnType("TEXT");

                                            b3.Property<int>("UnitType")
                                                .HasColumnType("INTEGER");

                                            b3.Property<double>("Value")
                                                .HasColumnType("REAL");

                                            b3.HasKey("DataReadingPairPrecipitationSummaryCurrentConditionsId");

                                            b3.ToTable("CurrentConditions");

                                            b3.WithOwner()
                                                .HasForeignKey("DataReadingPairPrecipitationSummaryCurrentConditionsId");
                                        });

                                    b2.OwnsOne("ZenoWeatherApp.Model.DataReading", "Metric", b3 =>
                                        {
                                            b3.Property<int>("DataReadingPairPrecipitationSummaryCurrentConditionsId")
                                                .HasColumnType("INTEGER");

                                            b3.Property<string>("Unit")
                                                .HasColumnType("TEXT");

                                            b3.Property<int>("UnitType")
                                                .HasColumnType("INTEGER");

                                            b3.Property<double>("Value")
                                                .HasColumnType("REAL");

                                            b3.HasKey("DataReadingPairPrecipitationSummaryCurrentConditionsId");

                                            b3.ToTable("CurrentConditions");

                                            b3.WithOwner()
                                                .HasForeignKey("DataReadingPairPrecipitationSummaryCurrentConditionsId");
                                        });

                                    b2.Navigation("Imperial");

                                    b2.Navigation("Metric");
                                });

                            b1.OwnsOne("ZenoWeatherApp.Model.DataReadingPair", "PastHour", b2 =>
                                {
                                    b2.Property<int>("PrecipitationSummaryCurrentConditionsId")
                                        .HasColumnType("INTEGER");

                                    b2.Property<int>("DataReadingPairId")
                                        .HasColumnType("INTEGER");

                                    b2.HasKey("PrecipitationSummaryCurrentConditionsId");

                                    b2.ToTable("CurrentConditions");

                                    b2.WithOwner()
                                        .HasForeignKey("PrecipitationSummaryCurrentConditionsId");

                                    b2.OwnsOne("ZenoWeatherApp.Model.DataReading", "Imperial", b3 =>
                                        {
                                            b3.Property<int>("DataReadingPairPrecipitationSummaryCurrentConditionsId")
                                                .HasColumnType("INTEGER");

                                            b3.Property<string>("Unit")
                                                .HasColumnType("TEXT");

                                            b3.Property<int>("UnitType")
                                                .HasColumnType("INTEGER");

                                            b3.Property<double>("Value")
                                                .HasColumnType("REAL");

                                            b3.HasKey("DataReadingPairPrecipitationSummaryCurrentConditionsId");

                                            b3.ToTable("CurrentConditions");

                                            b3.WithOwner()
                                                .HasForeignKey("DataReadingPairPrecipitationSummaryCurrentConditionsId");
                                        });

                                    b2.OwnsOne("ZenoWeatherApp.Model.DataReading", "Metric", b3 =>
                                        {
                                            b3.Property<int>("DataReadingPairPrecipitationSummaryCurrentConditionsId")
                                                .HasColumnType("INTEGER");

                                            b3.Property<string>("Unit")
                                                .HasColumnType("TEXT");

                                            b3.Property<int>("UnitType")
                                                .HasColumnType("INTEGER");

                                            b3.Property<double>("Value")
                                                .HasColumnType("REAL");

                                            b3.HasKey("DataReadingPairPrecipitationSummaryCurrentConditionsId");

                                            b3.ToTable("CurrentConditions");

                                            b3.WithOwner()
                                                .HasForeignKey("DataReadingPairPrecipitationSummaryCurrentConditionsId");
                                        });

                                    b2.Navigation("Imperial");

                                    b2.Navigation("Metric");
                                });

                            b1.Navigation("Past12Hours");

                            b1.Navigation("Past18Hours");

                            b1.Navigation("Past24Hours");

                            b1.Navigation("Past3Hours");

                            b1.Navigation("Past6Hours");

                            b1.Navigation("Past9Hours");

                            b1.Navigation("PastHour");
                        });

                    b.OwnsOne("ZenoWeatherApp.Model.Wind", "Wind", b1 =>
                        {
                            b1.Property<int>("CurrentConditionsId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("WindId")
                                .HasColumnType("INTEGER");

                            b1.HasKey("CurrentConditionsId");

                            b1.ToTable("CurrentConditions");

                            b1.WithOwner()
                                .HasForeignKey("CurrentConditionsId");

                            b1.OwnsOne("ZenoWeatherApp.Model.DataReadingPair", "Speed", b2 =>
                                {
                                    b2.Property<int>("WindCurrentConditionsId")
                                        .HasColumnType("INTEGER");

                                    b2.Property<int>("DataReadingPairId")
                                        .HasColumnType("INTEGER");

                                    b2.HasKey("WindCurrentConditionsId");

                                    b2.ToTable("CurrentConditions");

                                    b2.WithOwner()
                                        .HasForeignKey("WindCurrentConditionsId");

                                    b2.OwnsOne("ZenoWeatherApp.Model.DataReading", "Imperial", b3 =>
                                        {
                                            b3.Property<int>("DataReadingPairWindCurrentConditionsId")
                                                .HasColumnType("INTEGER");

                                            b3.Property<string>("Unit")
                                                .HasColumnType("TEXT");

                                            b3.Property<int>("UnitType")
                                                .HasColumnType("INTEGER");

                                            b3.Property<double>("Value")
                                                .HasColumnType("REAL");

                                            b3.HasKey("DataReadingPairWindCurrentConditionsId");

                                            b3.ToTable("CurrentConditions");

                                            b3.WithOwner()
                                                .HasForeignKey("DataReadingPairWindCurrentConditionsId");
                                        });

                                    b2.OwnsOne("ZenoWeatherApp.Model.DataReading", "Metric", b3 =>
                                        {
                                            b3.Property<int>("DataReadingPairWindCurrentConditionsId")
                                                .HasColumnType("INTEGER");

                                            b3.Property<string>("Unit")
                                                .HasColumnType("TEXT");

                                            b3.Property<int>("UnitType")
                                                .HasColumnType("INTEGER");

                                            b3.Property<double>("Value")
                                                .HasColumnType("REAL");

                                            b3.HasKey("DataReadingPairWindCurrentConditionsId");

                                            b3.ToTable("CurrentConditions");

                                            b3.WithOwner()
                                                .HasForeignKey("DataReadingPairWindCurrentConditionsId");
                                        });

                                    b2.Navigation("Imperial");

                                    b2.Navigation("Metric");
                                });

                            b1.OwnsOne("ZenoWeatherApp.Model.WindDirection", "Direction", b2 =>
                                {
                                    b2.Property<int>("WindCurrentConditionsId")
                                        .HasColumnType("INTEGER");

                                    b2.Property<int>("Degrees")
                                        .HasColumnType("INTEGER");

                                    b2.Property<string>("English")
                                        .HasColumnType("TEXT");

                                    b2.Property<string>("Localized")
                                        .HasColumnType("TEXT");

                                    b2.HasKey("WindCurrentConditionsId");

                                    b2.ToTable("CurrentConditions");

                                    b2.WithOwner()
                                        .HasForeignKey("WindCurrentConditionsId");
                                });

                            b1.Navigation("Direction");

                            b1.Navigation("Speed");
                        });

                    b.Navigation("ApparentTemperature");

                    b.Navigation("Ceiling");

                    b.Navigation("DewPoint");

                    b.Navigation("PrecipitationSummary");

                    b.Navigation("Pressure");

                    b.Navigation("Temperature");

                    b.Navigation("Visibility");

                    b.Navigation("WetBulbTemperature");

                    b.Navigation("Wind");

                    b.Navigation("WindChillTemperature");
                });

            modelBuilder.Entity("ZenoWeatherApp.Model.DailyForecast", b =>
                {
                    b.HasOne("ZenoWeatherApp.Model.Forecast", null)
                        .WithMany("DailyForecasts")
                        .HasForeignKey("ForecastId");

                    b.OwnsOne("ZenoWeatherApp.Model.DailyForecastPortion", "Day", b1 =>
                        {
                            b1.Property<int>("DailyForecastId")
                                .HasColumnType("INTEGER");

                            b1.Property<bool>("HasPrecipitation")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Icon")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("IconPhrase")
                                .HasColumnType("TEXT");

                            b1.Property<string>("PrecipitationIntensity")
                                .HasColumnType("TEXT");

                            b1.Property<string>("PrecipitationType")
                                .HasColumnType("TEXT");

                            b1.HasKey("DailyForecastId");

                            b1.ToTable("DailyForecast");

                            b1.WithOwner()
                                .HasForeignKey("DailyForecastId");
                        });

                    b.OwnsOne("ZenoWeatherApp.Model.DailyForecastPortion", "Night", b1 =>
                        {
                            b1.Property<int>("DailyForecastId")
                                .HasColumnType("INTEGER");

                            b1.Property<bool>("HasPrecipitation")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Icon")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("IconPhrase")
                                .HasColumnType("TEXT");

                            b1.Property<string>("PrecipitationIntensity")
                                .HasColumnType("TEXT");

                            b1.Property<string>("PrecipitationType")
                                .HasColumnType("TEXT");

                            b1.HasKey("DailyForecastId");

                            b1.ToTable("DailyForecast");

                            b1.WithOwner()
                                .HasForeignKey("DailyForecastId");
                        });

                    b.OwnsOne("ZenoWeatherApp.Model.Temperatures", "Temperature", b1 =>
                        {
                            b1.Property<int>("DailyForecastId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("TemperaturesId")
                                .HasColumnType("INTEGER");

                            b1.HasKey("DailyForecastId");

                            b1.ToTable("DailyForecast");

                            b1.WithOwner()
                                .HasForeignKey("DailyForecastId");

                            b1.OwnsOne("ZenoWeatherApp.Model.Temperature", "Maximum", b2 =>
                                {
                                    b2.Property<int>("TemperaturesDailyForecastId")
                                        .HasColumnType("INTEGER");

                                    b2.Property<string>("Unit")
                                        .HasColumnType("TEXT");

                                    b2.Property<double>("Value")
                                        .HasColumnType("REAL");

                                    b2.HasKey("TemperaturesDailyForecastId");

                                    b2.ToTable("DailyForecast");

                                    b2.WithOwner()
                                        .HasForeignKey("TemperaturesDailyForecastId");
                                });

                            b1.OwnsOne("ZenoWeatherApp.Model.Temperature", "Minimum", b2 =>
                                {
                                    b2.Property<int>("TemperaturesDailyForecastId")
                                        .HasColumnType("INTEGER");

                                    b2.Property<string>("Unit")
                                        .HasColumnType("TEXT");

                                    b2.Property<double>("Value")
                                        .HasColumnType("REAL");

                                    b2.HasKey("TemperaturesDailyForecastId");

                                    b2.ToTable("DailyForecast");

                                    b2.WithOwner()
                                        .HasForeignKey("TemperaturesDailyForecastId");
                                });

                            b1.Navigation("Maximum");

                            b1.Navigation("Minimum");
                        });

                    b.Navigation("Day");

                    b.Navigation("Night");

                    b.Navigation("Temperature");
                });

            modelBuilder.Entity("ZenoWeatherApp.Model.Forecast", b =>
                {
                    b.OwnsOne("ZenoWeatherApp.Model.ForecastSummary", "Headline", b1 =>
                        {
                            b1.Property<int>("ForecastId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Category")
                                .HasColumnType("TEXT");

                            b1.Property<DateTime>("EffectiveDate")
                                .HasColumnType("TEXT");

                            b1.Property<int>("Severity")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Text")
                                .HasColumnType("TEXT");

                            b1.HasKey("ForecastId");

                            b1.ToTable("Forecasts");

                            b1.WithOwner()
                                .HasForeignKey("ForecastId");
                        });

                    b.Navigation("Headline");
                });

            modelBuilder.Entity("ZenoWeatherApp.Model.Location", b =>
                {
                    b.HasOne("ZenoWeatherApp.Model.AdministrativeArea", "AdministrativeArea")
                        .WithMany("Locations")
                        .HasForeignKey("AdministrativeAreaID");

                    b.HasOne("ZenoWeatherApp.Model.Country", "Country")
                        .WithMany("Locations")
                        .HasForeignKey("CountryID");

                    b.HasOne("ZenoWeatherApp.Model.TimeZone", "TimeZone")
                        .WithMany("Locations")
                        .HasForeignKey("TimeZoneCode");

                    b.Navigation("AdministrativeArea");

                    b.Navigation("Country");

                    b.Navigation("TimeZone");
                });

            modelBuilder.Entity("ZenoWeatherApp.Model.AdministrativeArea", b =>
                {
                    b.Navigation("Locations");
                });

            modelBuilder.Entity("ZenoWeatherApp.Model.Country", b =>
                {
                    b.Navigation("Locations");
                });

            modelBuilder.Entity("ZenoWeatherApp.Model.Forecast", b =>
                {
                    b.Navigation("DailyForecasts");
                });

            modelBuilder.Entity("ZenoWeatherApp.Model.TimeZone", b =>
                {
                    b.Navigation("Locations");
                });
#pragma warning restore 612, 618
        }
    }
}
